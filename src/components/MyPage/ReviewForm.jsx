import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import axios from 'axios';
import MyPageSidebar from '../Sidebars/MyPageSidebar';
import FragranceSearchModal from '../Modals/FragranceSearchModal';
import CancelConfirmationModal from '../Modals/CancelConfirmationModal';
import AlertModal from '../Modals/AlertModal';
import './ReviewForm.css';

const ReviewForm = () => {
  const [selectedFragrance, setSelectedFragrance] = useState('');
  const [title, setTitle] = useState('');
  const [rating, setRating] = useState(5); // Î≥ÑÏ†ê Í∏∞Î≥∏Í∞íÏùÑ 5Î°ú ÏÑ§Ï†ï
  const [content, setContent] = useState('');
  const [image, setImage] = useState(null);
  const [imagePreviewUrl, setImagePreviewUrl] = useState(null);
  const [showHoverPreview, setShowHoverPreview] = useState(false);
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [isCancelModalOpen, setIsCancelModalOpen] = useState(false);
  const [showAlertModal, setShowAlertModal] = useState(false);
  const [perfumeList, setPerfumeList] = useState([]); // Ìñ•Ïàò Î¶¨Ïä§Ìä∏ Ï∂îÍ∞Ä
  const navigate = useNavigate();

  useEffect(() => {
    // Ìñ•Ïàò Î¶¨Ïä§Ìä∏Î•º Î∂àÎü¨Ïò§Îäî Ìï®Ïàò
    const fetchPerfumeList = async () => {
      try {
        const response = await axios.get('http://gachon-adore.duckdns.org:8081/user/perfume/perfume/list');
        if (response.data && response.data.length > 0) {
          setPerfumeList(response.data);
        } else {
          console.warn('ÏÑúÎ≤ÑÏóêÏÑú Îπà Ìñ•Ïàò Î¶¨Ïä§Ìä∏Î•º Î∞òÌôòÌñàÏäµÎãàÎã§.');
        }
      } catch (error) {
        console.error('Ìñ•Ïàò Î¶¨Ïä§Ìä∏Î•º Í∞ÄÏ†∏Ïò§Îäî Ï§ë Ïò§Î•ò Î∞úÏÉù:', error);
      }
    };

    fetchPerfumeList();
  }, []);

  const handleImageUpload = (e) => {
    const file = e.target.files[0];
    if (file && file.type.startsWith('image/')) {
      const previewUrl = URL.createObjectURL(file);
      setImage(file);
      setImagePreviewUrl(previewUrl);
    } else {
      alert("Ïù¥ÎØ∏ÏßÄ ÌååÏùºÎßå ÏóÖÎ°úÎìúÌï† Ïàò ÏûàÏäµÎãàÎã§.");
    }
  };

  const openModal = () => setIsModalOpen(true);
  const closeModal = () => setIsModalOpen(false);
  const openCancelModal = () => setIsCancelModalOpen(true);
  const closeCancelModal = () => setIsCancelModalOpen(false);
  const closeAlertModal = () => setShowAlertModal(false);

  const handleSelectFragrance = (fragrance) => {
    setSelectedFragrance(fragrance);
    setIsModalOpen(false);
  };

  const handleRating = (value) => {
    setRating(value);
  };

  const handleSubmit = async () => {
    if (!selectedFragrance || !title || rating <= 0 || !content) {
      setShowAlertModal(true); // ÌïÑÏàò Ìï≠Î™©Ïù¥ Ï±ÑÏõåÏßÄÏßÄ ÏïäÏùÄ Í≤ΩÏö∞ AlertModal ÌëúÏãú
      return;
    }

    const reviewData = {
      title,
      content,
      photo: image ? image.name : '', // Ïù¥ÎØ∏ÏßÄ ÌååÏùº Ïù¥Î¶Ñ
      perfumeId: selectedFragrance.id, // ÏÑ†ÌÉùÌïú Ìñ•ÏàòÏùò ID
      memberId: 0, // Ïã§Ï†ú ÏÇ¨Ïö©ÏûêÏùò IDÎ°ú ÍµêÏ≤¥ ÌïÑÏöî
    };

    try {
      const response = await axios.post('http://gachon-adore.duckdns.org:8081/user/review/create', reviewData, {
        headers: {
          'Content-Type': 'application/json',
        },
      });
      console.log('Î¶¨Î∑∞ ÏÉùÏÑ± ÏÑ±Í≥µ:', response.data);
      navigate('/mypage/reviewlist'); // Î¶¨Î∑∞ Î™©Î°ù ÌéòÏù¥ÏßÄÎ°ú Ïù¥Îèô
    } catch (error) {
      console.error('Î¶¨Î∑∞ ÏÉùÏÑ± Ï§ë Ïò§Î•ò Î∞úÏÉù:', error);
    }
  };

  return (
    <div className="mypage-container">
      <MyPageSidebar />
      <div className="review-form">
        <h1>Î¶¨Î∑∞ Îì±Î°ù</h1>
        <div className="review-form-table">
          <div className="review-form-row">
            <span className="review-form-label">Ìñ•Ïàò ÏÑ†ÌÉù</span>
            <div className="review-form-input-group">
              <input
                type="text"
                placeholder="Select fragrance"
                className="review-form-fragrance-input"
                value={selectedFragrance.perfume_nm || ''}
                readOnly
              />
              <button className="review-form-search-btn" onClick={openModal}>üîç</button>
            </div>
          </div>
          <div className="review-form-row">
            <span className="review-form-label">Ï†úÎ™©</span>
            <input
              type="text"
              className="review-form-input-text"
              value={title}
              onChange={(e) => setTitle(e.target.value)}
            />
          </div>
          <div className="review-form-row">
            <span className="review-form-label">Î≥ÑÏ†ê</span>
            <div className="review-form-rating-stars">
              {[1, 2, 3, 4, 5].map((star) => (
                <span
                  key={star}
                  className={`review-form-star ${rating >= star ? 'review-form-filled' : ''}`}
                  onClick={() => handleRating(star)} // 1Ï†ê Îã®ÏúÑÎ°ú ÌÅ¥Î¶≠
                >
                  ‚òÖ
                </span>
              ))}
              <span className="review-form-rating-display">{rating}</span>
            </div>
          </div>
          <div className="review-form-row">
            <span className="review-form-label">ÎÇ¥Ïö©</span>
            <textarea
              className="review-form-input-textarea"
              value={content}
              onChange={(e) => setContent(e.target.value)}
            />
          </div>
          <div className="review-form-row">
            <span className="review-form-label">ÏÇ¨ÏßÑ</span>
            <div className="review-form-file-upload">
              <input type="file" accept="image/*" onChange={handleImageUpload} />
              {imagePreviewUrl && (
                <div
                  className="review-form-image-preview-container"
                  onMouseEnter={() => setShowHoverPreview(true)}
                  onMouseLeave={() => setShowHoverPreview(false)}
                >
                  <img src={imagePreviewUrl} alt="Ïù¥ÎØ∏ÏßÄ ÎØ∏Î¶¨Î≥¥Í∏∞" className="review-form-image-preview" />
                  {showHoverPreview && (
                    <div className="review-form-hover-preview">
                      <img src={imagePreviewUrl} alt="ÌôïÎåÄ Ïù¥ÎØ∏ÏßÄ ÎØ∏Î¶¨Î≥¥Í∏∞" />
                    </div>
                  )}
                </div>
              )}
            </div>
          </div>
        </div>
        <div className="review-form-action-buttons">
          <button
            onClick={handleSubmit}
            className="review-form-submit-btn"
          >
            Î¶¨Î∑∞ ÏûëÏÑ±
          </button>
          <button onClick={openCancelModal} className="review-form-cancel-btn">Ï∑®ÏÜå</button>
        </div>

        {isModalOpen && (
          <FragranceSearchModal
            onClose={closeModal}
            onSelectFragrance={handleSelectFragrance}
            perfumeList={perfumeList} // Ìñ•Ïàò Î¶¨Ïä§Ìä∏ Ï†ÑÎã¨
          />
        )}
        {isCancelModalOpen && (
          <CancelConfirmationModal onClose={closeCancelModal} onConfirm={() => navigate('/mypage/reviewlist')} />
        )}
        {showAlertModal && (
          <AlertModal
            message="Î™®Îì† ÌïÑÏàò Ìï≠Î™©ÏùÑ ÏûÖÎ†•Ìï¥ Ï£ºÏÑ∏Ïöî!"
            onClose={closeAlertModal}
          />
        )}
      </div>
    </div>
  );
};

export default ReviewForm;