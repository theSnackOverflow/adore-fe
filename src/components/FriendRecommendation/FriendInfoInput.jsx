// src/components/FriendRecommendation/FriendInfoInput.jsx
import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import FriendRecommendationSidebar from '../Sidebars/FriendRecommendationSidebar';
import AlertModal from '../Modals/AlertModal';
import './FriendInfoInput.css';

const FriendInfoInput = () => {
  const [formData, setFormData] = useState({
    name: '',
    gender: 'ÎÇ®ÏÑ±',
    ageRange: '20ÎåÄ',
    favoriteNotes: '',
    personality: [],
    usagePurpose: [],
    priceRange: '10ÎßåÏõê ÎåÄ',
  });

  const [isAlertModalOpen, setIsAlertModalOpen] = useState(false);
  const [alertMessage, setAlertMessage] = useState('');

  const navigate = useNavigate(); // ÌéòÏù¥ÏßÄ Ïù¥ÎèôÏùÑ ÏúÑÌïú useNavigate ÌõÖ ÏÇ¨Ïö©

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setFormData({ ...formData, [name]: value });
  };

  const handleCheckboxChange = (e, category) => {
    const { value } = e.target;
    setFormData((prevData) => ({
      ...prevData,
      [category]: prevData[category].includes(value)
        ? prevData[category].filter((item) => item !== value)
        : [...prevData[category], value],
    }));
  };

  const handleRecommendation = () => {
    if (
      !formData.name ||
      !formData.favoriteNotes ||
      formData.personality.length === 0 ||
      formData.usagePurpose.length === 0
    ) {
      setAlertMessage("ÌïÑÏàò Ìï≠Î™©Îì§ÏùÑ Î™®Îëê ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî!");
      setIsAlertModalOpen(true);
    } else {
      navigate('/friendrecommendation/friendresult'); // FriendResult ÌéòÏù¥ÏßÄÎ°ú Ïù¥Îèô
    }
  };

  const handleCancel = () => {
    setAlertMessage("ÏûÖÎ†•Ïù¥ Ï∑®ÏÜåÎêòÏóàÏäµÎãàÎã§ ü•≤");
    setIsAlertModalOpen(true);
  };

  const closeAlertModal = () => {
    setIsAlertModalOpen(false);
  };

  return (
    <div className="friend-info-input-container">
      <FriendRecommendationSidebar />
      <div className="friend-info-input-content">
        <h1>ÏπúÍµ¨ Ï†ïÎ≥¥ ÏûÖÎ†•</h1>
        <table className="friend-info-input-table">
          <tbody>
            <tr>
              <th>Ïù¥Î¶Ñ</th>
              <td>
                <input
                  type="text"
                  name="name"
                  value={formData.name}
                  onChange={handleInputChange}
                />
              </td>
            </tr>
            <tr>
              <th>ÏÑ±Î≥Ñ</th>
              <td>
                <select
                  name="gender"
                  value={formData.gender}
                  onChange={handleInputChange}
                >
                  <option value="ÎÇ®ÏÑ±">ÎÇ®ÏÑ±</option>
                  <option value="Ïó¨ÏÑ±">Ïó¨ÏÑ±</option>
                </select>
              </td>
            </tr>
            <tr>
              <th>Ïó∞Î†πÎåÄ</th>
              <td>
                <select
                  name="ageRange"
                  value={formData.ageRange}
                  onChange={handleInputChange}
                >
                  <option value="10ÎåÄ">10ÎåÄ</option>
                  <option value="20ÎåÄ">20ÎåÄ</option>
                  <option value="30ÎåÄ">30ÎåÄ</option>
                  <option value="40ÎåÄ">40ÎåÄ</option>
                  <option value="50ÎåÄ Ïù¥ÏÉÅ">50ÎåÄ Ïù¥ÏÉÅ</option>
                </select>
              </td>
            </tr>
            <tr>
              <th>ÏÑ†Ìò∏ ÎÖ∏Ìä∏</th>
              <td>
                <div className="friend-info-search-bar">
                  <input
                    type="text"
                    placeholder="ÎÖ∏Ìä∏ Í≤ÄÏÉâ"
                    name="favoriteNotes"
                    value={formData.favoriteNotes}
                    onChange={handleInputChange}
                  />
                </div>
              </td>
            </tr>
            <tr>
              <th>ÏÑ±Í≤©</th>
              <td>
                <div className="friend-info-checkbox-group">
                  {['ÌôúÎèôÏ†Å', 'Ï∞®Î∂ÑÌï®', 'Í∞êÏÑ±Ï†Å', 'ÏßÄÏ†ÅÏù∏', 'ÎèÖÎ¶ΩÏ†Å', 'Ïú†ÏæåÌïú', 'Í≥ÑÌöçÏ†Å'].map((trait) => (
                    <label key={trait}>
                      <input
                        type="checkbox"
                        value={trait}
                        checked={formData.personality.includes(trait)}
                        onChange={(e) => handleCheckboxChange(e, 'personality')}
                      />
                      {trait}
                    </label>
                  ))}
                </div>
              </td>
            </tr>
            <tr>
              <th>ÏÇ¨Ïö© Î™©Ï†Å</th>
              <td>
                <div className="friend-info-checkbox-group">
                  {['ÏùºÏÉÅÏö©', 'Îç∞Ïù¥Ìä∏Ïö©', 'ÌååÌã∞Ïö©'].map((purpose) => (
                    <label key={purpose}>
                      <input
                        type="checkbox"
                        value={purpose}
                        checked={formData.usagePurpose.includes(purpose)}
                        onChange={(e) => handleCheckboxChange(e, 'usagePurpose')}
                      />
                      {purpose}
                    </label>
                  ))}
                </div>
              </td>
            </tr>
            <tr>
              <th>Í∞ÄÍ≤©ÎåÄ</th>
              <td>
                <select
                  name="priceRange"
                  value={formData.priceRange}
                  onChange={handleInputChange}
                >
                  <option value="5ÎßåÏõê ÎåÄ">5ÎßåÏõê ÎåÄ</option>
                  <option value="10ÎßåÏõê ÎåÄ">10ÎßåÏõê ÎåÄ</option>
                  <option value="20ÎßåÏõê ÎåÄ">20ÎßåÏõê ÎåÄ</option>
                </select>
              </td>
            </tr>
          </tbody>
        </table>
        <div className="friend-info-form-buttons">
          <button type="button" onClick={handleRecommendation}>
            Ï∂îÏ≤ú Î∞õÍ∏∞
          </button>
          <button type="button" onClick={handleCancel}>
            Ï∑®ÏÜå
          </button>
        </div>
      </div>

      {isAlertModalOpen && (
        <AlertModal
          message={alertMessage}
          onClose={closeAlertModal}
        />
      )}
    </div>
  );
};

export default FriendInfoInput;